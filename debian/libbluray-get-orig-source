#!/bin/sh

# Script used to generate the orig source tarball for libbluray.
STABLE=0

LIBBLURAY_MAJOR_VERSION="0.2"
PPA_REVISION="1"
LIBBLURAY_GIT_URL="git://git.videolan.org/libbluray.git"
DEFAULT_LIBBLURAY_BRANCH="master"
LIBBLURAY_SOURCE="./libbluray"

if [ -z "${BRANCH}" ]; then BRANCH="${DEFAULT_LIBBLURAY_BRANCH}"; fi
if [ "${BRANCH:0:7}" != "origin/" ]; then BRANCH="origin/${BRANCH}"; fi
if [ -z "${REVISION}" ]; then REVISION="${BRANCH}"; fi


if [ "$(GIT_DIR="${LIBBLURAY_SOURCE}/.git" git config remote.origin.url)" = "${LIBBLURAY_GIT_URL}" ]; then
  GIT_DIR="${LIBBLURAY_SOURCE}/.git" git fetch origin
else
  git clone --no-checkout "${LIBBLURAY_GIT_URL}" "${LIBBLURAY_SOURCE}"
fi

GIT_REV_DATE=$(GIT_DIR="${LIBBLURAY_SOURCE}/.git" git log --abbrev=7 -1 --pretty=format:"%h %ci" ${REVISION} | awk '{gsub("-", "");print $2"."$1}')
if [ "$STABLE" = "1" ]; then
  LIBBLURAY_VERSION="${LIBBLURAY_MAJOR_VERSION}"
else
  LIBBLURAY_VERSION="${LIBBLURAY_MAJOR_VERSION}~git${GIT_REV_DATE}"
fi

#LIBBLURAY_GIT_COMMIT="20739ede2fcadd67b35a1553b9ee9372de21f9f7"
#DATE_RETRIEVED="20110213"
#COMMIT_SHORT_FORM="$(echo $LIBBLURAY_GIT_COMMIT | \
#                     sed -e 's/^\([[:xdigit:]]\{,7\}\).*/\1/')"
#LIBBLURAY_VERSION="0.2~git${DATE_RETRIEVED}.${COMMIT_SHORT_FORM}"
BUILDDIR="libbluray-${LIBBLURAY_VERSION}"
mkdir -p "${BUILDDIR}"

GIT_DIR="${PWD}/${LIBBLURAY_SOURCE}/.git" GIT_WORK_TREE="${BUILDDIR}" git reset --hard "${REVISION}"
  #Check out the specified revision into our build dir. We keep these separate so that a git clean
  # will not remove the .git dir. This way we don't end up re-cloning for each build.
  #As of 1.7.1, git has a bug that prevents a hard reset with a relative GIT_DIR. Hack around using $PWD.

echo "Removing temp files and other cruft from source tarball"
find $(BUILDDIR} \( \( -type f -a \
  \( -name '#*#' -o -name '.*~' -o -name '*~' -o -name DEADJOE \
  -o -name '*.orig' -o -name '*.rej' -o -name '*.bak' \
  -o -name '.*.orig' -o -name .*.rej -o -name '.SUMS' \
  -o -name TAGS -o \( -path '*/.deps/*' -a -name '*.P' \) \
  -o -name config.status -o -name config.cache -o -name config.log \
  \) -exec rm -f "{}" \; \) -o \
  \( -type d -a -name autom4te.cache -prune -exec rm -rf "{}" \; \) \)
rm -f ${BUILDDIR}/.gitignore

# Remove empty directories
echo "Removing empty directories"
find ${BUILDDIR} -type d -empty -delete

echo "Create orig tarball"
tar --exclude-vcs -czf "libbluray_${LIBBLURAY_VERSION}.orig.tar.gz" \
  "${BUILDDIR}"



#git clone "$LIBBLURAY_GIT_URL" "libbluray-${LIBBLURAY_VERSION}"

#cd "libbluray-${LIBBLURAY_VERSION}"
#git checkout "$LIBBLURAY_GIT_COMMIT"
#./bootstrap
#cd ..

# Remove temp files and other cruft from source tarball
# The find command snippet here was taken from debhelper's dh_clean command
# with some modification to delete more unneeded files.
